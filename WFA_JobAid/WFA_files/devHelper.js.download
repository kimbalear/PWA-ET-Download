// =========================================
// -------------------------------------------------
//     DevHelper
//          - Methods to help debug for developer
//          - Can run on console.log and can be turned on /off for seeing scheduled task messages..
//
// -------------------------------------------------

function DevHelper() {};

DevHelper.INFO;
DevHelper.tempCount = 0;

DevHelper.testRunInterval;
DevHelper.testRunCount = 0;

DevHelper.devMode = false;
DevHelper.devModeAccessCode = '4512';
DevHelper.devModeFailCount = 0;
DevHelper.devModeFailMax = 5;

DevHelper.debugConsoleMode = false;

DevHelper.sampleDataTemplate = 
[
  {
    "_id": "client_{USERNAME}_{SHORTDATE}_{8DIGITS}",
    "date": {
        "updatedOnMdbUTC": "{RECENT_SHORTDATE}T12:32:03",
        "createdOnMdbUTC": "{RECENT_SHORTDATE}T11:26:26"
    },    
    "clientDetails": {
        "firstName": "{FIRSTNAME}",
        "lastName": "{LASTNAME}",
        "phoneNumber": "{10DIGITS}",
        "age": "{AGE}",
        "users": [ "{USERNAME}" ],
        "voucherCode": [ "{8DIGITS}" ],
        "autoGenerated": true
    },
    "clientConsent": {
        "phone": true,
        "tracking": true,
        "service": true,
        "feedback": false
    },    
    "activities": [{
        "id": "{USERNAME}_{SHORTDATE}_{8DIGITS}",
        "date": {
            "createdOnMdbUTC": "{EARLIER_SHORTDATE}T09:31:02.488",
            "createdOnMdbLoc": "{EARLIER_SHORTDATE}T09:31:02.488",
            "capturedUTC": "{EARLIER_SHORTDATE}T09:30:50.000",
            "createdOnDeviceUTC": "{EARLIER_SHORTDATE}T09:30:50.000",
            "capturedLoc": "{EARLIER_SHORTDATE}T18:30:50.000"
        },
        "activeUser": "{USERNAME}",
        "creditedUsers": [
          "{USERNAME}_OTH"
        ],
        "type": "{ACTIVITY_TYPE}",
        "location": {},
        "program": "{PROGRAM}",
        "processing": {
            "created": "{EARLIER_SHORTDATE}T18:30:50.000",
            "status": "{STATUS}",
            "statusRead": false,
            "history": [
                { "status": "submit_wMsg", "dateTime": "{EARLIER_SHORTDATE}T18:30:50.000", "responseCode": 412, "msg": "Client and Voucher were successfully created. We couldn't send the voucher to phone 0777 576 4090.PLease give the voucher code directly to the client. Voucher: 1234" }
            ]
        },
        "transactions": [{
            "type": "c_reg",
            "clientDetails": {
                "firstName": "{FIRSTNAME}",
                "lastName": "{LASTNAME}",
                "phoneNumber": "{10DIGITS}",
                "clientId": "",
                "age": "{AGE}",
                "provisionMethod": "{METHOD}"
            },
            "clientConsent": {                
            }
        }, {
            "type": "v_iss",
            "clientDetails": {
                "voucherCode": "{8DIGITS}"
            }
        }]
    }]
}];


DevHelper.setDevMode = function( bDev )
{
    if ( bDev )
    {
        // ALERT HERE TO GET CONFIRMATION..
        var devModeAccessCode = Util.trim( prompt( 'Please enter the dev mode access code.' ) );
        if( devModeAccessCode === DevHelper.devModeAccessCode )
        {   
            console.log( 'DevMode set.' );
            MsgManager.msgAreaShow( 'DevMode set.' );
                 
            DevHelper.devMode = true;
            SyncManagerNew.coolDownEnabled = false;
            ConfigManager.coolDownTimeOverride = 2000;  // set this as 2 seconds - Not implemented
        }
        else
        {
            DevHelper.devModeFailCount++;
            
            if( DevHelper.devModeFailCount > DevHelper.devModeFailMax )
            {
                MsgManager.msgAreaShow( 'Wrong DevMode access code. Forcing logOut due to too many failure.', 'ERROR' );
                console.log( 'Too many DevMode set failed - wrong access code.  FailedCount: ' + DevHelper.devModeFailCount );
                SessionManager.cwsRenderObj.logOutProcess();
            }
            else
            {
                MsgManager.msgAreaShow( 'Wrong DevMode access code.', 'ERROR' );
                console.log( 'DevMode set failed - wrong access code.' )    
            }
        }
    }
    else
    {
        DevHelper.devMode = false;
        SyncManagerNew.coolDownEnabled = true;
    }
};

DevHelper.checkNStartDebugConsole = function()
{
    if ( Util.getParameterByName("debug") === Constants.debugConsolePwd ) 
    {
        DevHelper.debugConsoleMode = true;
        ConsoleCustomLog.debugConsoleStart();
    }
};

DevHelper.switchConnectMode = function( connModeStr )
{
    if ( connModeStr === "STABLE" )
    {
        ConnManagerNew.efficiency.Immediate_wsAvailCheck = true;
        ConnManagerNew.efficiency.Immediate_OneCheckOnline = false;
    }
    else if ( connModeStr === "ACCESSIBLE" )
    {
        ConnManagerNew.efficiency.Immediate_wsAvailCheck = true;
        ConnManagerNew.efficiency.Immediate_OneCheckOnline = true;
        // More settings to ...
    }
};


DevHelper.showClientListData = function()
{
    console.log( ClientDataManager.getClientList() );
};

DevHelper.showClientListStr = function()
{
    console.log( JSON.stringify( { 'list': ClientDataManager.getClientList() } ) );
};


DevHelper.showActivityListData = function()
{
    console.log( ActivityDataManager.getActivityList() );
};

DevHelper.showActivityListStr = function()
{
    console.log( JSON.stringify( { 'list': ActivityDataManager.getActivityList() } ) );
};

DevHelper.removeSampleData = function()
{
    ClientDataManager.removeSampleData( function( removedCount ) 
    {
        console.log( 'DevHelper.removeSampleData Done and saved to IndexedDB.  Removed Count: ' + removedCount );
        SessionManager.cwsRenderObj.renderArea1st();
    });
};

// create load data method..
DevHelper.loadSampleData = function( icount ) 
{
    ClientDataManager.loadSampleData( icount, DevHelper.sampleDataTemplate, function() {
        console.log( 'DevHelper.loadSampleData Done and saved to IndexedDB' );
        SessionManager.cwsRenderObj.renderArea1st();
    });
};


DevHelper.showActivityCardConfigs = function()
{
    console.log( ConfigManager.getActivityDef() );
};

DevHelper.showINFO = function()
{
    console.log( DevHelper.INFO );
};

DevHelper.setINFO_ForConsoleDisplay = function( INFO )
{
    DevHelper.INFO = INFO;
};


DevHelper.runTest = function()
{
    var testJson = {
        "1d1": "1",
        "d1": {
            "1d2": "2",
            "1d3": "mark"
        }
    };

    //Util.jsonKeysReplace_Ref = function( obj, keyListSet, iDepth, limit );
};

// =======================================

// Not yet implemented
DevHelper.setDebugFlag = function() { };

// Not yet implemented
DevHelper.setScheduleMsgFlag = function() { };

// ======================================
// === TESTING ONES BELOW ================

DevHelper.TestRequestSend = function( url )
{
    try
    {
        var payloadJson = {
            "activity": { 
                "activeUser": "james"
            }
        };

        var loadingTag = undefined;

        WsCallManager.requestPostDws( url, payloadJson, loadingTag, function( success, mongoClientsJson ) {

            console.log( success, mongoClientsJson );
        });
    }
    catch( errMsg )
    {
        console.log( 'Error in DevHelper.TestRequestSend - ' + errMsg );
    }
};

DevHelper.testRun2 = function()
{
    var dest = { 'a1': [ { 'name': 'james' }, { 'name': 'mark' } ],
        'a2': 'james',
        'o1': { 'name': 'james', 'child': { 'age': 12, 'weight': 30 } }
          };
    var obj = { 'a1': [ { 'name': 'james1' }, { 'name': 'mark1' } ],
          'a2': 'mark',
          'a3': 'mark2',
          'o1': { 'name': 'mark', 'child': { 'age': 20, 'height': '23' }, 'hobby': 'fly' }
          };
    Util.mergeDeep( dest, obj );

    console.log( dest );
};

DevHelper.statPeriodOptions = function()
{
	var dateGroups = [ { name: "Last 24 hours", term: "", hours: 24, created: 0 },
			{ name: "Last 3 days", term: "", hours: 72 , created: 0 },
			{ name: "Last 7 days", term: "", hours: 168, created: 0 },
			{ name: "Last 30 days", term: "", hours: 720, created: 0 },
			{ name: "Last 3 months", term: "", hours: 2160, created: 0 },
            { name: "Last 6 months", term: "", hours: 4320, created: 0 } ];

    return dateGroups;

};

DevHelper.sampleDataList_Static = 
[
  {
    "_id": "5e8af6d6f39ff8047ee4f3e5",
    "date": { // MANDATORY?
        "updatedOnMdbUTC": "2020-06-18T12:32:03", // MANDATORY?
        "createdOnMdbUTC": "2020-06-18T11:26:26" // MANDATORY?
    },    
    "clientDetails": {
        "firstName": "James",
        "lastName": "Chang",
        "phoneNumber": "6543222212",
        "age": "14",
        "users": [ "LA_TEST_IPC" ],
        "voucherCode": [ "22223333" ]
    },
    "clientConsent": {
        "phone": true, // MANDATORY?
        "tracking": true,
        "service": true,
        "feedback": false
    },    
    "activities": [{
        "id": "LA_TEST_PROV_20200406_093052500",
        "date": {
            "createdOnMdbUTC": "2020-04-06T09:31:02.488",
            "createdOnMdbLoc": "2020-04-06T09:31:02.488",

            "capturedUTC": "2020-04-06T09:30:50.000",
            "createdOnDeviceUTC": "2020-04-06T09:30:50.000",
            "capturedLoc": "2020-04-06T18:30:50.000"
        },
        "activeUser": "LA_TEST_IPC",
        "creditedUsers": [
          "LA_TEST_OTH"
        ],
        "type": "eVoucher",
        "location": {},
        "program": "fpl",
        //"activityType": "eVoucher",
        "processing": {
            "created": "2020-04-06T18:30:50.000",
            "status": "submit_wMsg",
            "statusRead": false,
            "history": [
                { "status": "submit_wMsg", "dateTime": "2020-04-06T18:30:50.000", "responseCode": 412, "msg": "Client and Voucher were successfully created. We couldn't send the voucher to phone 0777 576 4090.PLease give the voucher code directly to the client. Voucher: 1234" }
            ]
        },
        "transactions": [{
            "type": "c_reg",
            "clientDetails": {
                "firstName": "James",
                "lastName": "Chang",
                "phoneNumber": "6543222212",
                "clientId": "",
                "age": "14",
                "provisionMethod": "Pills"
            },
            "clientConsent": {                
            }
        }, {
            "type": "v_iss",
            "clientDetails": {
                "voucherCode": "22223333"
            }
        }]
    }]
}];


// =========================

DevHelper.testRunStart = function()
{
    DevHelper.testRunInterval = setInterval( function() {
        DevHelper.testRunCount++;
        console.log( 'count: ' + DevHelper.testRunCount + ', time: ' + new Date().toString() );
    }, 2000 );
};

DevHelper.testRunStop = function()
{
    clearInterval( DevHelper.testRunInterval );
};

// =========================
// == FIX OPERATION RELATED METHODS

DevHelper.fixOpt_0426_wsSetting = function()
{    
    var fixOptName = 'fixOpt_0426_wsSetting';
    var searchFailMsg = "ERROR in sendPost_ac_eval, TypeError: Cannot read property 'status' of undefined";

    return DevHelper.fixOpt_Common( fixOptName, searchFailMsg );
};

DevHelper.fixOpt_0429_coord = function()
{    
    var fixOptName = 'fixOpt_0429_coord';
    var searchFailMsg = "SyntaxError: Unexpected token l in JSON at position 1";

    return DevHelper.fixOpt_Common( fixOptName, searchFailMsg );
};


DevHelper.fixOpt_Common = function( fixOptName, searchFailMsg )
{
    var statusFailed = Constants.status_failed;

    var activityList = ActivityDataManager.getActivityList();
    var changeActivities = [];
    var returnMsg = '';

    activityList.forEach( activity => 
    {
        try
        {
            var activityId = activity.id;

            if ( activityId )
            {
                var actProcs= activity.processing;

                if ( actProcs && actProcs.status === Constants.status_error )
                {
                    var bWsConfigFail = false;
    
                    for( var i = 0; i < actProcs.history.length; i++ )
                    {
                        try
                        {
                            var hLog = actProcs.history[i];
    
                            if ( hLog.msg && hLog.msg.indexOf( searchFailMsg ) >= 0 )
                            {
                                bWsConfigFail = true;
                                break;
                            }
                        }
                        catch( errMsg )
                        {
                            console.log( 'ERROR during history loop: ' + errMsg );
                        }
                    }
    
    
                    if ( bWsConfigFail )
                    {
                        changeActivities.push( activityId );
                        
                        // 0. change 'failed' --> 'failed_back'
                        actProcs.history.forEach( his => 
                        {
                            if ( his.status === Constants.status_failed ) his.status = 'failed_back';
                        }); 
    
                        // 1. Set status as failed & apply the changes to UI
                        ActivityDataManager.activityUpdate_Status( activityId, statusFailed, function() 
                        {
                            var msg = "With fix operation, " + fixOptName + ", status has been changed to '" + statusFailed + "'";
                            ActivityDataManager.activityUpdate_History( activityId, statusFailed, msg, 0 );                         
                        });
                    }    
                }
            }            
        }
        catch( errMsg )
        {
            console.log( 'ERROR during activity looping: ' + errMsg );
        }
    });

    if ( changeActivities.length > 0 ) 
    {
        ClientDataManager.saveCurrent_ClientsStore();
        returnMsg = '[' + fixOptName + '] ' + changeActivities.length + ' activities changed' + SettingsStatic.CUT_LIST_MSG + changeActivities.join( ', ' ) + ']';
    }

    return returnMsg;
};


// =====================================
// == Log Search + Handler


DevHelper.mzFind = function()
{
    mzList_May.forEach( activityId => {
// Dhis2 Check:
// https://data.psi-mis.org/api/events.json?pageSize=7&program=A7SRy7lpk1x&programStage=G3HhsA7BiNs&filter=ikGT37ZiDl8:EQ:MZ_PMT_7587307_20210511_102601669&startDate=2021-05-01T00:14:43.000&endDate=2021-05-31T00:14:43.000&fields=trackedEntityInstance

    });
};


DevHelper.mzDup = function()
{ 
    //DevHelper.dupCases( '2021-05-06', '2021-05-07', 40, undefined, function( resultList ) {
    //} );

    var resultList = mz0531.response.dataList;

    var uniqueList = DevHelper.dupListClassify( resultList ).sort();

    console.log( uniqueList );
};

DevHelper.dupCases = function( dateFrom, dateTo, limit, endpoint, returnFunc )
{    
    endpoint = ( endpoint ) ? endpoint : 'PWA.legacy_captureIPC';
    limit = ( limit ) ? limit : 30;

    var timeStartJson = {};
    if ( dateFrom ) timeStartJson[ '$gte' ] = dateFrom;
    if ( dateTo ) timeStartJson[ '$lt' ] = dateTo;

    if ( Util.isObjEmpty( timeStartJson ) ) timeStartJson[ '$gte' ] = Util.addDay( new Date(), -1 ).toISOString().replace( 'Z', '' );

    // Create document with these fields - 'userName', 'dateTime'
    var payloadJson = { 'searchJson': { 
        "find": {
            "endpoint": endpoint,
            "time.start": timeStartJson,
            "response": { "$exists": false },
            "responseErr": { "$exists": false }
        },
        "queryLimit": limit
    } };

    WsCallManager.requestDWS_RETRIEVE( '/TTS.prodLog', payloadJson, undefined, function( resultList ) {
        console.log( resultList );

        if ( returnFunc ) returnFunc( resultList );
        //var dupList = DevHelper.dupListClassify( resultList );

        //DevHelper.storeInMongo( dupList );

    } );
};

DevHelper.dupListClassify = function( resultList )
{
    var dupList = [];
    var dupObj = {};

    // 1. Create as object to keep it as unique list

    resultList.forEach( item => {
        if( item.dcId )
        {
            if ( dupObj[ item.dcId ] === undefined ) dupObj[ item.dcId ] = 0;
            else dupObj[ item.dcId ]++;
        }
    });

    console.log( dupObj );

    return Object.keys( dupObj );    
};

// =============================================
// OLD ONES
